import { opensearchClient } from "@/app/lib/opensearch";
import { titanEmbeddings } from "@/app/lib/embeddings";
import { NextResponse } from "next/server";

export async function GET() {
  try {
    console.log("üöÄ Starting full RAG system test...");

    // 1. „Çµ„É≥„Éó„É´„Éâ„Ç≠„É•„É°„É≥„ÉàÊ∫ñÂÇô
    const sampleDocuments = [
      {
        text: "ÁîüÊàêAIÔºàGenerative AIÔºâ„ÅØ„ÄÅÊ©üÊ¢∞Â≠¶Áøí„É¢„Éá„É´„Çí‰ΩøÁî®„Åó„Å¶Êñ∞„Åó„ÅÑ„Ç≥„É≥„ÉÜ„É≥„ÉÑ„Çí‰ΩúÊàê„Åô„Çã‰∫∫Â∑•Áü•ËÉΩ„ÅÆÂàÜÈáé„Åß„Åô„ÄÇ„ÉÜ„Ç≠„Çπ„Éà„ÄÅÁîªÂÉè„ÄÅÈü≥Â£∞„ÄÅÂãïÁîª„Å™„Å©„ÇíÁîüÊàê„Åß„Åç„Åæ„Åô„ÄÇ",
        title: "ÁîüÊàêAIÊ¶ÇË¶Å",
        source: "ai_textbook",
        chunk_id: "gen_ai_001",
        metadata: {
          document_type: "educational",
          category: "artificial_intelligence",
          difficulty: "beginner",
        },
      },
      {
        text: "RAGÔºàRetrieval-Augmented GenerationÔºâ„ÅØ„ÄÅÂ§ñÈÉ®„ÅÆÁü•Ë≠ò„Éô„Éº„Çπ„Åã„ÇâÈñ¢ÈÄ£ÊÉÖÂ†±„ÇíÊ§úÁ¥¢„Åó„ÄÅ„Åù„ÅÆÊÉÖÂ†±„Çí‰Ωø„Å£„Å¶„Çà„ÇäÊ≠£Á¢∫„ÅßÂÖ∑‰ΩìÁöÑ„Å™ÂõûÁ≠î„ÇíÁîüÊàê„Åô„ÇãÊâãÊ≥ï„Åß„Åô„ÄÇ",
        title: "RAGÊâãÊ≥ï„ÅÆË™¨Êòé",
        source: "ai_textbook",
        chunk_id: "rag_001",
        metadata: {
          document_type: "educational",
          category: "machine_learning",
          difficulty: "intermediate",
        },
      },
      {
        text: "„Éô„ÇØ„Éà„É´„Éá„Éº„Çø„Éô„Éº„Çπ„ÅØ„ÄÅÈ´òÊ¨°ÂÖÉ„Éô„ÇØ„Éà„É´„Éá„Éº„Çø„ÇíÂäπÁéáÁöÑ„Å´Ê†ºÁ¥ç„ÉªÊ§úÁ¥¢„Åô„Çã„Åü„ÇÅ„ÅÆ„Éá„Éº„Çø„Éô„Éº„Çπ„Åß„Åô„ÄÇÈ°û‰ººÂ∫¶Ê§úÁ¥¢„ÇÑ„Çª„Éû„É≥„ÉÜ„Ç£„ÉÉ„ÇØÊ§úÁ¥¢„Å´‰ΩøÁî®„Åï„Çå„Åæ„Åô„ÄÇ",
        title: "„Éô„ÇØ„Éà„É´„Éá„Éº„Çø„Éô„Éº„Çπ",
        source: "ai_textbook",
        chunk_id: "vector_db_001",
        metadata: {
          document_type: "educational",
          category: "database",
          difficulty: "intermediate",
        },
      },
    ];

    // 2. „Éâ„Ç≠„É•„É°„É≥„Éà„Çí„Éô„ÇØ„Éà„É´Âüã„ÇÅËæº„Åø‰ªò„Åç„ÅßËøΩÂä†
    console.log("üìù Adding documents with embeddings...");
    const addResults = [];

    for (const doc of sampleDocuments) {
      const result = await opensearchClient.addTextDocument("documents", doc);
      addResults.push(result._id);
      // ÂêÑ„Éâ„Ç≠„É•„É°„É≥„ÉàÈñì„ÅßÂ∞ë„ÅóÂæÖÊ©ü
      await new Promise((resolve) => setTimeout(resolve, 500));
    }

    // 3. „Ç§„É≥„Éá„ÉÉ„ÇØ„ÇπÂá¶ÁêÜÂÆå‰∫Ü„ÇíÂæÖÊ©ü
    console.log("‚è≥ Waiting for indexing to complete...");
    await new Promise((resolve) => setTimeout(resolve, 3000));

    // 4. „Çª„Éû„É≥„ÉÜ„Ç£„ÉÉ„ÇØÊ§úÁ¥¢„ÉÜ„Çπ„Éà
    const testQueries = [
      "‰∫∫Â∑•Áü•ËÉΩ„Åß„Ç≥„É≥„ÉÜ„É≥„ÉÑ„Çí‰Ωú„ÇãÊäÄË°ì„Å´„Å§„ÅÑ„Å¶Êïô„Åà„Å¶",
      "Â§ñÈÉ®„Éá„Éº„Çø„Çí‰Ωø„Å£„Å¶ÂõûÁ≠îÁ≤æÂ∫¶„Çí‰∏ä„Åí„ÇãÊñπÊ≥ï",
      "È´òÊ¨°ÂÖÉ„Éá„Éº„Çø„ÅÆÊ§úÁ¥¢ÊñπÊ≥ï",
    ];

    const searchResults = {};
    for (const query of testQueries) {
      console.log(`üîç Testing query: "\${query}"`);
      const results = await opensearchClient.searchByText(
        "documents",
        query,
        2
        // 2,
        // 0.6
      );
      searchResults[query] = results;
    }

    // 5. È°û‰ººÂ∫¶Ë®àÁÆó„ÉÜ„Çπ„Éà
    const similarity = await titanEmbeddings.calculateSimilarity(
      testQueries[0],
      sampleDocuments[0].text
    );

    return NextResponse.json({
      success: true,
      message: "Full RAG system test completed successfully!",
      test_results: {
        documents_added: addResults.length,
        document_ids: addResults,
        semantic_search_results: Object.keys(searchResults).map((query) => ({
          query,
          results_count: searchResults[query].length,
          top_result: searchResults[query][0]
            ? {
                title: searchResults[query][0].source.title,
                score: searchResults[query][0].score,
                text_preview:
                  searchResults[query][0].source.text.substring(0, 100) + "...",
              }
            : null,
        })),
        similarity_test: {
          text1: testQueries[0].substring(0, 50) + "...",
          text2: sampleDocuments[0].text.substring(0, 50) + "...",
          similarity_score: similarity,
        },
      },
    });
  } catch (error) {
    console.error("‚ùå RAG system test failed:", error);

    return NextResponse.json(
      {
        success: false,
        error: error.message,
        stack: error.stack,
      },
      { status: 500 }
    );
  }
}
